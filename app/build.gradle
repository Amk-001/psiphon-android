apply plugin: 'com.android.application'

android {
    compileSdkVersion 30
    useLibrary 'org.apache.http.legacy'

    android.defaultConfig.vectorDrawables.useSupportLibrary = true

    repositories{
        maven {
            url "https://maven.google.com"
        }
    }

    def versionPropsFile = new File('version.properties')

    if (versionPropsFile.canRead()) {
        def Properties props = new Properties()

        props.load(new FileInputStream(versionPropsFile))
        if (props != null && props.containsKey('VERSION_CODE')) {
            def verName = props['VERSION_CODE']
            def verCode = verName.toInteger()
            def admobAppId = getBuildProperty('PRO_FREESTAR_ADMOB_APP_ID').replaceAll('^\"|\"$', "")

            defaultConfig {
                project.ext.set("archivesBaseName", "PsiphonAndroid");
                applicationId "com.psiphon3.subscription"
                resValue "string", "tray__authority", "${applicationId}.tray"
                minSdkVersion 14
                targetSdkVersion 30
                versionCode verCode
                versionName verName
                testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
                multiDexEnabled true
                manifestPlaceholders = [ admobAppId:admobAppId ]
                vectorDrawables.useSupportLibrary = true
                // Build type specific defaults below
                //
                // Specify non-null URL to override landing page from handshake
                buildConfigField "String", "STATIC_LANDING_PAGE_URL", "null"
                // Specify purchase verification environment, default is production
                buildConfigField "Boolean", "PURCHASE_VERIFIER_DEV_ENVIRONMENT", "false"
                // Specify PsiCash environment, default is production
                buildConfigField "Boolean", "PSICASH_DEV_ENVIRONMENT", "false"
            }
        } else {
            throw new GradleException('version.properties found but entries are missing')
        }
    } else {
        throw new GradleException("Could not read version.properties!")
    }

    signingConfigs {
        release
    }

    buildTypes {
        debug {
            debuggable true
            pseudoLocalesEnabled true
        }
        release {
            debuggable false
            ndk {
                // ABI configurations of native libraries Gradle should package with the APK.
                abiFilters 'armeabi-v7a', 'arm64-v8a'
            }
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.release
        }
    }

    lintOptions {
        checkReleaseBuilds false
        // Or, if you prefer, you can continue to check for errors in release builds,
        // but continue the build even when errors are found:
        abortOnError false
    }

    def propFile = new File('signing.properties')
    compileOptions {
        sourceCompatibility = '1.8'
        targetCompatibility = '1.8'
    }

    if (propFile.canRead()) {
        def Properties props = new Properties()
        props.load(new FileInputStream(propFile))

        if (props != null && props.containsKey('STORE_FILE') && props.containsKey('STORE_PASSWORD') &&
                props.containsKey('KEY_ALIAS') && props.containsKey('KEY_PASSWORD')) {
            android.signingConfigs.release.storeFile = file(props['STORE_FILE'])
            android.signingConfigs.release.storePassword = props['STORE_PASSWORD']
            android.signingConfigs.release.keyAlias = props['KEY_ALIAS']
            android.signingConfigs.release.keyPassword = props['KEY_PASSWORD']
        } else {
            throw new GradleException('signing.properties found but some entries are missing')
        }
    } else {
        throw new GradleException('signing.properties not found!')
    }

    buildTypes.each {
        it.buildConfigField 'String', 'SUBSCRIPTION_SPONSOR_ID', getBuildProperty('SUBSCRIPTION_SPONSOR_ID')
        it.buildConfigField 'String', 'IAB_PUBLIC_KEY', getBuildProperty('IAB_PUBLIC_KEY')
        it.buildConfigField 'String', 'ADMOB_APP_ID', getBuildProperty('PRO_FREESTAR_ADMOB_APP_ID')
    }
}

def getBuildProperty(String propertyName) {
    def propsFile = rootProject.file('build.properties')
    if (propsFile.exists()) {
        def props = new Properties()
        props.load(new FileInputStream(propsFile))
        if(props != null && props.containsKey(propertyName)) {
            return props[propertyName];
        } else {
            return "";
        }
    } else {
        throw new GradleException('File \'build.properties\' is missing! Please copy \'build.properties.stub\' to \'build.properties\' and edit the values.')
    }
}

repositories {
    jcenter()
    maven { url 'https://jitpack.io' }
    maven { url "https://freestar.jfrog.io/artifactory/freestar-mediation-android-sdk" }
    maven { url "https://s3.amazonaws.com/moat-sdk-builds" }
    maven { url "https://artifact.bytedance.com/repository/pangle" }
    maven {
        url = uri("https://adsbynimbus-public.s3.amazonaws.com/android/sdks")
        credentials {
            username = "*"
        }
        content {
            includeGroup("com.adsbynimbus.openrtb")
            includeGroup("com.adsbynimbus.android")
        }
    }
}

dependencies {
    implementation files('libs/jackson-core-2.2.0.jar')
    implementation files('libs/achartengine-1.0.0.jar')
    implementation files('libs/snakeyaml-1.10-android.jar')
    implementation files('libs/ca.psiphon.aar')

    implementation project(':tray')

    implementation files('libs/psicashlib-release.aar')

    implementation "androidx.multidex:multidex:$rootProject.ext.multidexVersion"
    implementation "androidx.appcompat:appcompat:$rootProject.ext.appcompatVersion"
    implementation "androidx.cardview:cardview:$rootProject.ext.cardviewVersion"
    implementation "com.google.android.material:material:$rootProject.ext.materialVersion"
    implementation "androidx.constraintlayout:constraintlayout:$rootProject.ext.constraintLayoutVersion"
    implementation "androidx.gridlayout:gridlayout:$rootProject.ext.gridlayoutVersion"
    implementation "androidx.recyclerview:recyclerview:$rootProject.ext.recyclerviewVersion"
    implementation "androidx.localbroadcastmanager:localbroadcastmanager:$rootProject.ext.localBroadCastManagerVersion"
    implementation "androidx.preference:preference:$rootProject.ext.preferenceVersion"

    //begin Freestar
    implementation 'com.freestar.android.ads:freestar:4.6.0'
    implementation 'com.freestar.android.ads.admob:freestar-admob-adapter:20.3.0.0'
    implementation 'com.freestar.android.ads.applovin:freestar-applovin-adapter:10.3.1.0'
    implementation 'com.freestar.android.ads.tam:freestar-tam-adapter:8.4.3.2'
    implementation 'com.freestar.android.ads.google:freestar-google-adapter:20.3.0.0'
    implementation 'com.freestar.android.ads.criteo:freestar-criteo-adapter:4.2.1.2'
    implementation 'com.freestar.android.ads.unityads:freestar-unity-adapter:3.7.1.2'
    implementation 'com.freestar.android.ads.vungle:freestar-vungle-adapter:6.10.2.1'
    implementation 'com.freestar.android.ads.facebook:freestar-facebook-adapter:6.1.0.1'
    implementation 'com.freestar.android.ads.mopub:freestar-mopub-adapter:5.18.0.0'
    implementation 'com.freestar.android.ads.nimbus:freestar-nimbus-adapter:1.10.4.0'
    implementation 'com.freestar.android.ads.pangle:freestar-pangle-adapter:3.6.0.0'

    implementation 'com.applovin:applovin-sdk:10.3.1'
    implementation 'com.criteo.publisher:criteo-publisher-sdk:4.2.1'
    implementation "com.google.android.gms:play-services-ads:$rootProject.ext.playServicesAdsVersion"
    implementation("com.google.android.ads.consent:consent-library:$rootProject.ext.adsConsentLibraryVersion") {
        exclude group: 'com.android.support'
        exclude group: 'com.google.code.gson', module: 'gson'
    }
    implementation 'com.mopub.mediation:facebookaudiencenetwork:6.5.1.0'
    implementation('com.facebook.android:audience-network-sdk:6.5.1') {
        exclude group: 'com.google.android.exoplayer'
        exclude group: 'com.google.android.gms'
        exclude group: 'com.android.support'
    }
    implementation 'com.vungle:publisher-sdk-android:6.10.2'
    implementation('com.mopub:mopub-sdk:5.18.0@aar') {
        transitive = true
        exclude group: 'com.android.support'
    }

    //nimbus
    implementation "com.adsbynimbus.android:nimbus:1.10.4" // Full Nimbus SDK with NimbusAdManager
    implementation "com.adsbynimbus.android:extension-okhttp:1.10.4" // Use OkHttp with NimbusAdManager
    implementation "com.adsbynimbus.android:extension-facebook:1.10.4"
    implementation "com.adsbynimbus.openrtb:kotlin:0.7.4"

    //Amazon Transparent Ads Marketplace
    implementation 'com.amazon.android:aps-sdk:8.4.3@aar'

    //Pangle; also requires play-services-ads-identifier but already in Criteo
    implementation 'com.pangle.global:ads-sdk:3.6.0.4'
    //end, FreeStar

    implementation "io.reactivex.rxjava2:rxandroid:$rootProject.ext.rxandroidVersion"
    implementation "io.reactivex.rxjava2:rxjava:$rootProject.ext.rxjavaVersion"
    implementation "com.jakewharton.rxrelay2:rxrelay:$rootProject.ext.rxrelayVersion"
    implementation "com.jakewharton.threetenabp:threetenabp:$rootProject.ext.threetenabpVersion"
    implementation "com.squareup.okhttp3:okhttp:$rootProject.ext.okhttpVersion"
    implementation "com.android.billingclient:billing:$rootProject.ext.playStoreBillingClientVersion"

    api "androidx.lifecycle:lifecycle-viewmodel:$rootProject.ext.lifecycleViewModelVersion"

    implementation "androidx.work:work-runtime:$rootProject.ext.workManagerVersion"
    implementation "androidx.work:work-rxjava2:$rootProject.ext.workManagerVersion"

    compileOnly "com.google.auto.value:auto-value:$rootProject.ext.autoValueVersion"
    annotationProcessor "com.google.auto.value:auto-value:$rootProject.ext.autoValueVersion"

    testImplementation "androidx.test.ext:junit:$rootProject.ext.junitVersion"
    testImplementation "org.mockito:mockito-core:$rootProject.ext.mockitoVersion"
    androidTestImplementation "org.mockito:mockito-android:$rootProject.ext.mockitoVersion"
    androidTestImplementation "androidx.test.ext:junit:$rootProject.ext.junitVersion"
}
