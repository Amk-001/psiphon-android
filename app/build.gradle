apply plugin: 'com.android.application'

android {
    compileSdkVersion 29
    useLibrary 'org.apache.http.legacy'

    android.defaultConfig.vectorDrawables.useSupportLibrary = true

    repositories{
        flatDir{
            dirs 'libs'
        }
        maven {
            url "https://maven.google.com"
        }
    }

    def versionPropsFile = new File('version.properties')

    if (versionPropsFile.canRead()) {
        def Properties props = new Properties()

        props.load(new FileInputStream(versionPropsFile))
        if (props != null && props.containsKey('VERSION_CODE')) {
            def verName = props['VERSION_CODE']
            def verCode = verName.toInteger()
            def admobAppId = getBuildProperty('PRO_FREESTAR_ADMOB_APP_ID').replaceAll('^\"|\"$', "")

            defaultConfig {
                project.ext.set("archivesBaseName", "PsiphonAndroid");
                applicationId "com.psiphon3.subscription"
                resValue "string", "tray__authority", "${applicationId}.tray"
                minSdkVersion 14
                targetSdkVersion 29
                versionCode verCode
                versionName verName
                testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
                multiDexEnabled true
                manifestPlaceholders = [ admobAppId:admobAppId ]
            }
        } else {
            throw new GradleException('version.properties found but entries are missing')
        }
    } else {
        throw new GradleException("Could not read version.properties!")
    }

    signingConfigs {
        release
    }

    buildTypes {
        debug {
            debuggable true
            pseudoLocalesEnabled true
        }
        release {
            debuggable false
            ndk {
                // ABI configurations of native libraries Gradle should package with the APK.
                abiFilters 'armeabi-v7a', 'arm64-v8a'
            }
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.release
        }
    }

    lintOptions {
        checkReleaseBuilds false
        // Or, if you prefer, you can continue to check for errors in release builds,
        // but continue the build even when errors are found:
        abortOnError false
    }

    def propFile = new File('signing.properties')
    if (propFile.canRead()) {
        def Properties props = new Properties()
        props.load(new FileInputStream(propFile))

        if (props != null && props.containsKey('STORE_FILE') && props.containsKey('STORE_PASSWORD') &&
                props.containsKey('KEY_ALIAS') && props.containsKey('KEY_PASSWORD')) {
            android.signingConfigs.release.storeFile = file(props['STORE_FILE'])
            android.signingConfigs.release.storePassword = props['STORE_PASSWORD']
            android.signingConfigs.release.keyAlias = props['KEY_ALIAS']
            android.signingConfigs.release.keyPassword = props['KEY_PASSWORD']
        } else {
            throw new GradleException('signing.properties found but some entries are missing')
        }
    } else {
        throw new GradleException('signing.properties not found!')
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    buildToolsVersion = '29.0.3'

    buildTypes.each {
        it.buildConfigField 'String', 'SUBSCRIPTION_SPONSOR_ID', getBuildProperty('SUBSCRIPTION_SPONSOR_ID')
        it.buildConfigField 'String', 'IAB_PUBLIC_KEY', getBuildProperty('IAB_PUBLIC_KEY')
        it.buildConfigField 'String', 'ADMOB_APP_ID', getBuildProperty('PRO_FREESTAR_ADMOB_APP_ID')
    }
}

def getBuildProperty(String propertyName) {
    def propsFile = rootProject.file('build.properties')
    if (propsFile.exists()) {
        def props = new Properties()
        props.load(new FileInputStream(propsFile))
        if(props != null && props.containsKey(propertyName)) {
            return props[propertyName];
        } else {
            return "";
        }
    } else {
        throw new GradleException('File \'build.properties\' is missing! Please copy \'build.properties.stub\' to \'build.properties\' and edit the values.')
    }
}

repositories {
    jcenter()
    maven { url 'https://jitpack.io' }
    maven { url "https://dl.bintray.com/vdopiacorp/fsdk" }
    maven { url "https://s3.amazonaws.com/moat-sdk-builds" }
    maven {
        url  "https://timehop.bintray.com/nimbus-android"

        metadataSources {
            mavenPom()
            artifact()
            ignoreGradleMetadataRedirection()
        }
    }
    maven {
        url  "https://timehop.bintray.com/nimbus-openrtb"

        metadataSources {
            mavenPom()
            artifact()
            ignoreGradleMetadataRedirection()
        }
    }
}

dependencies {
    implementation files('libs/jackson-core-2.2.0.jar')
    implementation files('libs/achartengine-1.0.0.jar')
    implementation files('libs/snakeyaml-1.10-android.jar')
    implementation(name: 'ca.psiphon', ext: 'aar')

    implementation project(':tray')

    implementation(name: 'psicashlib-release', ext: 'aar')

    implementation "androidx.multidex:multidex:$rootProject.ext.multidexVersion"
    implementation "androidx.appcompat:appcompat:$rootProject.ext.appcompatVersion"
    implementation "androidx.cardview:cardview:$rootProject.ext.cardviewVersion"
    implementation "com.google.android.material:material:$rootProject.ext.materialVersion"
    implementation "androidx.constraintlayout:constraintlayout:$rootProject.ext.constraintLayoutVersion"
    implementation "androidx.gridlayout:gridlayout:$rootProject.ext.gridlayoutVersion"
    implementation "androidx.recyclerview:recyclerview:$rootProject.ext.recyclerviewVersion"
    implementation "androidx.localbroadcastmanager:localbroadcastmanager:$rootProject.ext.localBroadCastManagerVersion"
    implementation "androidx.preference:preference:$rootProject.ext.preferenceVersion"

    //begin Freestar
    implementation 'com.freestar.android.ads:freestar:3.3.2'
    implementation 'com.freestar.android.ads.admob:freestar-admob-adapter:19.5.0.0'
    implementation 'com.freestar.android.ads.applovin:freestar-applovin-adapter:9.13.1.2'
    implementation 'com.freestar.android.ads.amazon:freestar-amazon-adapter:6.0.0.0'
    implementation 'com.freestar.android.ads.google:freestar-google-adapter:19.6.0.0'
    implementation 'com.freestar.android.ads.criteo:freestar-criteo-adapter:4.2.1.0'
    implementation 'com.freestar.android.ads.unityads:freestar-unity-adapter:3.5.0'
    implementation 'com.freestar.android.ads.vungle:freestar-vungle-adapter:6.7.0'  //Fullscreen ads only
    implementation 'com.freestar.android.ads.facebook:freestar-facebook-adapter:6.1.0.0'
    implementation 'com.freestar.android.ads.mopub:freestar-mopub-adapter:5.12.0.0'
    implementation 'com.freestar.android.ads.nimbus:freestar-nimbus-adapter:1.9.1.0'

    implementation 'com.applovin:applovin-sdk:9.13.1'
    implementation 'com.criteo.publisher:criteo-publisher-sdk:4.2.1'
    implementation "com.google.android.gms:play-services-ads:$rootProject.ext.playServicesAdsVersion"
    implementation("com.google.android.ads.consent:consent-library:$rootProject.ext.adsConsentLibraryVersion") {
        exclude group: 'com.android.support'
        exclude group: 'com.google.code.gson', module: 'gson'
    }
    implementation('com.facebook.android:audience-network-sdk:6.2.1') {
        exclude group: 'com.google.android.exoplayer'
        exclude group: 'com.google.android.gms'
        exclude group: 'com.android.support'
    }
    implementation('com.github.vungle:vungle-android-sdk:6.7.0') {
        exclude group: 'com.android.support'
    }
    implementation("com.mopub:mopub-sdk:$rootProject.ext.mopubSdkVersion@aar") {
        transitive = true
        exclude group: 'com.android.support'
    }
    //nimbus
    implementation "com.adsbynimbus.android:nimbus:1.9.1" // Full Nimbus SDK with NimbusAdManager
    implementation "com.adsbynimbus.android:extension-okhttp:1.9.1" // Use OkHttp with NimbusAdManager

    //Note: if you are using Pre-roll, un-comment the following line:
    //implementation 'com.google.ads.interactivemedia.v3:interactivemedia:3.11.2'
    //end, FreeStar

    implementation "io.reactivex.rxjava2:rxandroid:$rootProject.ext.rxandroidVersion"
    implementation "io.reactivex.rxjava2:rxjava:$rootProject.ext.rxjavaVersion"
    implementation "com.jakewharton.rxrelay2:rxrelay:$rootProject.ext.rxrelayVersion"
    implementation "com.jakewharton.threetenabp:threetenabp:$rootProject.ext.threetenabpVersion"
    implementation "com.squareup.okhttp3:okhttp:$rootProject.ext.okhttpVersion"
    implementation "com.android.billingclient:billing:$rootProject.ext.playStoreBillingClientVersion"

    api "androidx.lifecycle:lifecycle-viewmodel:$rootProject.ext.lifecycleViewModelVersion"

    implementation "androidx.work:work-runtime:$rootProject.ext.workManagerVersion"
    implementation "androidx.work:work-rxjava2:$rootProject.ext.workManagerVersion"

    compileOnly "com.google.auto.value:auto-value:$rootProject.ext.autoValueVersion"
    annotationProcessor "com.google.auto.value:auto-value:$rootProject.ext.autoValueVersion"

    testImplementation "androidx.test.ext:junit:$rootProject.ext.junitVersion"
    testImplementation "org.mockito:mockito-core:$rootProject.ext.mockitoVersion"
    androidTestImplementation "org.mockito:mockito-android:$rootProject.ext.mockitoVersion"
    androidTestImplementation "androidx.test.ext:junit:$rootProject.ext.junitVersion"
}
